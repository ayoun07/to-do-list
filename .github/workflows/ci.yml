name: ci

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: tododb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run backend tests
        run: |
          cd backend
          ./mvnw test

      - name: Build backend
        run: |
          cd backend
          ./mvnw clean install -DskipTests

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build

  docker:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ghcr.io/<TON-UTILISATEUR-GITHUB>/backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/<TON-UTILISATEUR-GITHUB>/frontend:latest

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, docker]
    if: always()

    steps:
      - name: Send success/failure notification to Google Chat
        run: |
          if [ "${{ needs.build-and-test.result }}" == "success" ] && [ "${{ needs.docker.result }}" == "success" ]; then
            STATUS="‚úÖ CI/CD termin√© avec succ√®s pour la branche \`${{ github.ref_name }}\` üöÄ"
          else
            STATUS="‚ùå √âchec du CI/CD sur la branche \`${{ github.ref_name }}\`. Check les logs üîç"
          fi

          curl -X POST -H "Content-Type: application/json" -d "{
            \"text\": \"$STATUS\"
          }" ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
